// Code generated by wit-bindgen-go. DO NOT EDIT.

//go:build !wasip1

// Package redis represents the imported interface "fermyon:spin/redis".
package redis

import (
	redistypes "github.com/fermyon/spin-go-sdk/internal/fermyon/spin/redis-types"
	"github.com/ydnar/wasm-tools-go/cm"
)

// Publish represents the imported function "publish".
//
// Publish a Redis message to the specificed channel and return an error, if any.
//
//	publish: func(address: string, channel: string, payload: payload) -> result<_,
//	error>
//
//go:nosplit
func Publish(address string, channel string, payload redistypes.Payload) (result cm.Result[redistypes.Error, struct{}, redistypes.Error]) {
	address0, address1 := cm.LowerString(address)
	channel0, channel1 := cm.LowerString(channel)
	payload0, payload1 := cm.LowerList(payload)
	wasmimport_Publish((*uint8)(address0), (uint32)(address1), (*uint8)(channel0), (uint32)(channel1), (*uint8)(payload0), (uint32)(payload1), &result)
	return
}

//go:wasmimport fermyon:spin/redis publish
//go:noescape
func wasmimport_Publish(address0 *uint8, address1 uint32, channel0 *uint8, channel1 uint32, payload0 *uint8, payload1 uint32, result *cm.Result[redistypes.Error, struct{}, redistypes.Error])

// Get represents the imported function "get".
//
// Get the value of a key.
//
//	get: func(address: string, key: string) -> result<payload, error>
//
//go:nosplit
func Get(address string, key string) (result cm.Result[PayloadShape, redistypes.Payload, redistypes.Error]) {
	address0, address1 := cm.LowerString(address)
	key0, key1 := cm.LowerString(key)
	wasmimport_Get((*uint8)(address0), (uint32)(address1), (*uint8)(key0), (uint32)(key1), &result)
	return
}

//go:wasmimport fermyon:spin/redis get
//go:noescape
func wasmimport_Get(address0 *uint8, address1 uint32, key0 *uint8, key1 uint32, result *cm.Result[PayloadShape, redistypes.Payload, redistypes.Error])

// Set represents the imported function "set".
//
// Set key to value. If key alreads holds a value, it is overwritten.
//
//	set: func(address: string, key: string, value: payload) -> result<_, error>
//
//go:nosplit
func Set(address string, key string, value redistypes.Payload) (result cm.Result[redistypes.Error, struct{}, redistypes.Error]) {
	address0, address1 := cm.LowerString(address)
	key0, key1 := cm.LowerString(key)
	value0, value1 := cm.LowerList(value)
	wasmimport_Set((*uint8)(address0), (uint32)(address1), (*uint8)(key0), (uint32)(key1), (*uint8)(value0), (uint32)(value1), &result)
	return
}

//go:wasmimport fermyon:spin/redis set
//go:noescape
func wasmimport_Set(address0 *uint8, address1 uint32, key0 *uint8, key1 uint32, value0 *uint8, value1 uint32, result *cm.Result[redistypes.Error, struct{}, redistypes.Error])

// Incr represents the imported function "incr".
//
// Increments the number stored at key by one. If the key does not exist, it is set
// to 0 before performing the operation.
// An error is returned if the key contains a value of the wrong type or contains
// a string that can not be represented as integer.
//
//	incr: func(address: string, key: string) -> result<s64, error>
//
//go:nosplit
func Incr(address string, key string) (result cm.Result[int64, int64, redistypes.Error]) {
	address0, address1 := cm.LowerString(address)
	key0, key1 := cm.LowerString(key)
	wasmimport_Incr((*uint8)(address0), (uint32)(address1), (*uint8)(key0), (uint32)(key1), &result)
	return
}

//go:wasmimport fermyon:spin/redis incr
//go:noescape
func wasmimport_Incr(address0 *uint8, address1 uint32, key0 *uint8, key1 uint32, result *cm.Result[int64, int64, redistypes.Error])

// Del represents the imported function "del".
//
// Removes the specified keys. A key is ignored if it does not exist.
//
//	del: func(address: string, keys: list<string>) -> result<s64, error>
//
//go:nosplit
func Del(address string, keys cm.List[string]) (result cm.Result[int64, int64, redistypes.Error]) {
	address0, address1 := cm.LowerString(address)
	keys0, keys1 := cm.LowerList(keys)
	wasmimport_Del((*uint8)(address0), (uint32)(address1), (*string)(keys0), (uint32)(keys1), &result)
	return
}

//go:wasmimport fermyon:spin/redis del
//go:noescape
func wasmimport_Del(address0 *uint8, address1 uint32, keys0 *string, keys1 uint32, result *cm.Result[int64, int64, redistypes.Error])

// Sadd represents the imported function "sadd".
//
// Add the specified `values` to the set named `key`, returning the number of newly-added
// values.
//
//	sadd: func(address: string, key: string, values: list<string>) -> result<s64, error>
//
//go:nosplit
func Sadd(address string, key string, values cm.List[string]) (result cm.Result[int64, int64, redistypes.Error]) {
	address0, address1 := cm.LowerString(address)
	key0, key1 := cm.LowerString(key)
	values0, values1 := cm.LowerList(values)
	wasmimport_Sadd((*uint8)(address0), (uint32)(address1), (*uint8)(key0), (uint32)(key1), (*string)(values0), (uint32)(values1), &result)
	return
}

//go:wasmimport fermyon:spin/redis sadd
//go:noescape
func wasmimport_Sadd(address0 *uint8, address1 uint32, key0 *uint8, key1 uint32, values0 *string, values1 uint32, result *cm.Result[int64, int64, redistypes.Error])

// Smembers represents the imported function "smembers".
//
// Retrieve the contents of the set named `key`.
//
//	smembers: func(address: string, key: string) -> result<list<string>, error>
//
//go:nosplit
func Smembers(address string, key string) (result cm.Result[ListStringShape, cm.List[string], redistypes.Error]) {
	address0, address1 := cm.LowerString(address)
	key0, key1 := cm.LowerString(key)
	wasmimport_Smembers((*uint8)(address0), (uint32)(address1), (*uint8)(key0), (uint32)(key1), &result)
	return
}

//go:wasmimport fermyon:spin/redis smembers
//go:noescape
func wasmimport_Smembers(address0 *uint8, address1 uint32, key0 *uint8, key1 uint32, result *cm.Result[ListStringShape, cm.List[string], redistypes.Error])

// Srem represents the imported function "srem".
//
// Remove the specified `values` from the set named `key`, returning the number of
// newly-removed values.
//
//	srem: func(address: string, key: string, values: list<string>) -> result<s64, error>
//
//go:nosplit
func Srem(address string, key string, values cm.List[string]) (result cm.Result[int64, int64, redistypes.Error]) {
	address0, address1 := cm.LowerString(address)
	key0, key1 := cm.LowerString(key)
	values0, values1 := cm.LowerList(values)
	wasmimport_Srem((*uint8)(address0), (uint32)(address1), (*uint8)(key0), (uint32)(key1), (*string)(values0), (uint32)(values1), &result)
	return
}

//go:wasmimport fermyon:spin/redis srem
//go:noescape
func wasmimport_Srem(address0 *uint8, address1 uint32, key0 *uint8, key1 uint32, values0 *string, values1 uint32, result *cm.Result[int64, int64, redistypes.Error])

// Execute represents the imported function "execute".
//
// Execute an arbitrary Redis command and receive the result.
//
//	execute: func(address: string, command: string, arguments: list<redis-parameter>)
//	-> result<list<redis-result>, error>
//
//go:nosplit
func Execute(address string, command string, arguments cm.List[redistypes.RedisParameter]) (result cm.Result[ListRedisResultShape, cm.List[redistypes.RedisResult], redistypes.Error]) {
	address0, address1 := cm.LowerString(address)
	command0, command1 := cm.LowerString(command)
	arguments0, arguments1 := cm.LowerList(arguments)
	wasmimport_Execute((*uint8)(address0), (uint32)(address1), (*uint8)(command0), (uint32)(command1), (*redistypes.RedisParameter)(arguments0), (uint32)(arguments1), &result)
	return
}

//go:wasmimport fermyon:spin/redis execute
//go:noescape
func wasmimport_Execute(address0 *uint8, address1 uint32, command0 *uint8, command1 uint32, arguments0 *redistypes.RedisParameter, arguments1 uint32, result *cm.Result[ListRedisResultShape, cm.List[redistypes.RedisResult], redistypes.Error])
