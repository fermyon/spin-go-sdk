// Code generated by wit-bindgen-go. DO NOT EDIT.

//go:build !wasip1

// Package postgres represents the imported interface "fermyon:spin/postgres".
package postgres

import (
	rdbmstypes "github.com/fermyon/spin-go-sdk/internal/fermyon/spin/rdbms-types"
	"github.com/ydnar/wasm-tools-go/cm"
)

// PgError represents the variant "fermyon:spin/postgres#pg-error".
//
// General purpose error.
//
//	variant pg-error {
//		success,
//		connection-failed(string),
//		bad-parameter(string),
//		query-failed(string),
//		value-conversion-failed(string),
//		other-error(string),
//	}
type PgError cm.Variant[uint8, cm.StringShape, string]

// PgErrorSuccess returns a [PgError] of case "success".
func PgErrorSuccess() PgError {
	var data struct{}
	return cm.New[PgError](0, data)
}

// Success returns true if [PgError] represents the variant case "success".
func (self *PgError) Success() bool {
	return self.Tag() == 0
}

// PgErrorConnectionFailed returns a [PgError] of case "connection-failed".
func PgErrorConnectionFailed(data string) PgError {
	return cm.New[PgError](1, data)
}

// ConnectionFailed returns a non-nil *[string] if [PgError] represents the variant case "connection-failed".
func (self *PgError) ConnectionFailed() *string {
	return cm.Case[string](self, 1)
}

// PgErrorBadParameter returns a [PgError] of case "bad-parameter".
func PgErrorBadParameter(data string) PgError {
	return cm.New[PgError](2, data)
}

// BadParameter returns a non-nil *[string] if [PgError] represents the variant case "bad-parameter".
func (self *PgError) BadParameter() *string {
	return cm.Case[string](self, 2)
}

// PgErrorQueryFailed returns a [PgError] of case "query-failed".
func PgErrorQueryFailed(data string) PgError {
	return cm.New[PgError](3, data)
}

// QueryFailed returns a non-nil *[string] if [PgError] represents the variant case "query-failed".
func (self *PgError) QueryFailed() *string {
	return cm.Case[string](self, 3)
}

// PgErrorValueConversionFailed returns a [PgError] of case "value-conversion-failed".
func PgErrorValueConversionFailed(data string) PgError {
	return cm.New[PgError](4, data)
}

// ValueConversionFailed returns a non-nil *[string] if [PgError] represents the variant case "value-conversion-failed".
func (self *PgError) ValueConversionFailed() *string {
	return cm.Case[string](self, 4)
}

// PgErrorOtherError returns a [PgError] of case "other-error".
func PgErrorOtherError(data string) PgError {
	return cm.New[PgError](5, data)
}

// OtherError returns a non-nil *[string] if [PgError] represents the variant case "other-error".
func (self *PgError) OtherError() *string {
	return cm.Case[string](self, 5)
}

// Query represents the imported function "query".
//
// query the database: select
//
//	query: func(address: string, statement: string, params: list<parameter-value>)
//	-> result<row-set, pg-error>
//
//go:nosplit
func Query(address string, statement string, params cm.List[rdbmstypes.ParameterValue]) (result cm.Result[RowSetShape, rdbmstypes.RowSet, PgError]) {
	address0, address1 := cm.LowerString(address)
	statement0, statement1 := cm.LowerString(statement)
	params0, params1 := cm.LowerList(params)
	wasmimport_Query((*uint8)(address0), (uint32)(address1), (*uint8)(statement0), (uint32)(statement1), (*rdbmstypes.ParameterValue)(params0), (uint32)(params1), &result)
	return
}

//go:wasmimport fermyon:spin/postgres query
//go:noescape
func wasmimport_Query(address0 *uint8, address1 uint32, statement0 *uint8, statement1 uint32, params0 *rdbmstypes.ParameterValue, params1 uint32, result *cm.Result[RowSetShape, rdbmstypes.RowSet, PgError])

// Execute represents the imported function "execute".
//
// execute command to the database: insert, update, delete
//
//	execute: func(address: string, statement: string, params: list<parameter-value>)
//	-> result<u64, pg-error>
//
//go:nosplit
func Execute(address string, statement string, params cm.List[rdbmstypes.ParameterValue]) (result cm.Result[PgErrorShape, uint64, PgError]) {
	address0, address1 := cm.LowerString(address)
	statement0, statement1 := cm.LowerString(statement)
	params0, params1 := cm.LowerList(params)
	wasmimport_Execute((*uint8)(address0), (uint32)(address1), (*uint8)(statement0), (uint32)(statement1), (*rdbmstypes.ParameterValue)(params0), (uint32)(params1), &result)
	return
}

//go:wasmimport fermyon:spin/postgres execute
//go:noescape
func wasmimport_Execute(address0 *uint8, address1 uint32, statement0 *uint8, statement1 uint32, params0 *rdbmstypes.ParameterValue, params1 uint32, result *cm.Result[PgErrorShape, uint64, PgError])
