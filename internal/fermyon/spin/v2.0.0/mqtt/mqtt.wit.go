// Code generated by wit-bindgen-go. DO NOT EDIT.

//go:build !wasip1

// Package mqtt represents the imported interface "fermyon:spin/mqtt@2.0.0".
package mqtt

import (
	"github.com/ydnar/wasm-tools-go/cm"
)

// Error represents the variant "fermyon:spin/mqtt@2.0.0#error".
//
// Errors related to interacting with Mqtt
//
//	variant error {
//		invalid-address,
//		too-many-connections,
//		connection-failed(string),
//		other(string),
//	}
type Error cm.Variant[uint8, cm.StringShape, string]

// ErrorInvalidAddress returns a [Error] of case "invalid-address".
//
// An invalid address string
func ErrorInvalidAddress() Error {
	var data struct{}
	return cm.New[Error](0, data)
}

// InvalidAddress returns true if [Error] represents the variant case "invalid-address".
func (self *Error) InvalidAddress() bool {
	return self.Tag() == 0
}

// ErrorTooManyConnections returns a [Error] of case "too-many-connections".
//
// There are too many open connections
func ErrorTooManyConnections() Error {
	var data struct{}
	return cm.New[Error](1, data)
}

// TooManyConnections returns true if [Error] represents the variant case "too-many-connections".
func (self *Error) TooManyConnections() bool {
	return self.Tag() == 1
}

// ErrorConnectionFailed returns a [Error] of case "connection-failed".
//
// Connection failure e.g. address not allowed.
func ErrorConnectionFailed(data string) Error {
	return cm.New[Error](2, data)
}

// ConnectionFailed returns a non-nil *[string] if [Error] represents the variant case "connection-failed".
func (self *Error) ConnectionFailed() *string {
	return cm.Case[string](self, 2)
}

// ErrorOther returns a [Error] of case "other".
//
// Some other error occurred
func ErrorOther(data string) Error {
	return cm.New[Error](3, data)
}

// Other returns a non-nil *[string] if [Error] represents the variant case "other".
func (self *Error) Other() *string {
	return cm.Case[string](self, 3)
}

// Qos represents the enum "fermyon:spin/mqtt@2.0.0#qos".
//
// QoS for publishing Mqtt messages
//
//	enum qos {
//		at-most-once,
//		at-least-once,
//		exactly-once
//	}
type Qos uint8

const (
	QosAtMostOnce Qos = iota
	QosAtLeastOnce
	QosExactlyOnce
)

// Connection represents the imported resource "fermyon:spin/mqtt@2.0.0#connection".
//
//	resource connection
type Connection cm.Resource

// ResourceDrop represents the imported resource-drop for resource "connection".
//
// Drops a resource handle.
//
//go:nosplit
func (self Connection) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ConnectionResourceDrop((uint32)(self0))
	return
}

//go:wasmimport fermyon:spin/mqtt@2.0.0 [resource-drop]connection
//go:noescape
func wasmimport_ConnectionResourceDrop(self0 uint32)

// ConnectionOpen represents the imported static function "open".
//
// Open a connection to the Mqtt instance at `address`.
//
//	open: static func(address: string, username: string, password: string, keep-alive-interval-in-secs:
//	u64) -> result<connection, error>
//
//go:nosplit
func ConnectionOpen(address string, username string, password string, keepAliveIntervalInSecs uint64) (result cm.Result[ErrorShape, Connection, Error]) {
	address0, address1 := cm.LowerString(address)
	username0, username1 := cm.LowerString(username)
	password0, password1 := cm.LowerString(password)
	keepAliveIntervalInSecs0 := (uint64)(keepAliveIntervalInSecs)
	wasmimport_ConnectionOpen((*uint8)(address0), (uint32)(address1), (*uint8)(username0), (uint32)(username1), (*uint8)(password0), (uint32)(password1), (uint64)(keepAliveIntervalInSecs0), &result)
	return
}

//go:wasmimport fermyon:spin/mqtt@2.0.0 [static]connection.open
//go:noescape
func wasmimport_ConnectionOpen(address0 *uint8, address1 uint32, username0 *uint8, username1 uint32, password0 *uint8, password1 uint32, keepAliveIntervalInSecs0 uint64, result *cm.Result[ErrorShape, Connection, Error])

// Publish represents the imported method "publish".
//
// Publish an Mqtt message to the specified `topic`.
//
//	publish: func(topic: string, payload: payload, qos: qos) -> result<_, error>
//
//go:nosplit
func (self Connection) Publish(topic string, payload Payload, qos Qos) (result cm.Result[ErrorShape, struct{}, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	topic0, topic1 := cm.LowerString(topic)
	payload0, payload1 := cm.LowerList(payload)
	qos0 := (uint32)(qos)
	wasmimport_ConnectionPublish((uint32)(self0), (*uint8)(topic0), (uint32)(topic1), (*uint8)(payload0), (uint32)(payload1), (uint32)(qos0), &result)
	return
}

//go:wasmimport fermyon:spin/mqtt@2.0.0 [method]connection.publish
//go:noescape
func wasmimport_ConnectionPublish(self0 uint32, topic0 *uint8, topic1 uint32, payload0 *uint8, payload1 uint32, qos0 uint32, result *cm.Result[ErrorShape, struct{}, Error])

// Payload represents the list "fermyon:spin/mqtt@2.0.0#payload".
//
// The message payload.
//
//	type payload = list<u8>
type Payload cm.List[uint8]
